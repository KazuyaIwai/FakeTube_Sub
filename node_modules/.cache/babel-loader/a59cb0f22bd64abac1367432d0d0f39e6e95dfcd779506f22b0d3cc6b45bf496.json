{"ast":null,"code":"// サーバーサイドURL\nconst URL = 'http://localhost:8080/api/stream';\n\n// URL作成関数\nfunction mkUrl(dtlUrl, params) {\n  var parameter = '?';\n  params.forEach((value, key) => {\n    parameter += key + '=' + value + '&';\n  });\n  if (parameter == '?') {\n    parameter = '';\n  } else if (parameter.endsWith('&')) {\n    parameter = parameter.slice(0, -1);\n  }\n  return URL + dtlUrl + parameter;\n}\n\n// ホーム用動画取得Ajax関数\nasync function fetchFtThumbnailVideos(limit, offset, searchText) {\n  var params = new Map([['limit', limit.toString()], ['offset', offset.toString()], ['searchText', searchText]]);\n  const response = await fetch(mkUrl('', params), {\n    method: 'GET'\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch data');\n  }\n  const data = await response.json();\n  return data;\n}\n\n// ホーム用サムネイルImg取得Ajax関数\nasync function fetchFtThumbnailImg(vId, isHover) {\n  var params = new Map([['vid', vId], ['isHover', isHover]]);\n  const response = await fetch(mkUrl('/thumbnail', params), {\n    method: 'GET'\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch data');\n  }\n  const blob = await response.blob();\n  return blob;\n}\n\n// 登録チャンネルアイコン画像取得Ajax関数\nasync function fetchFtChannelIcon(channelId) {\n  var params = new Map([['channelId', channelId]]);\n  const response = await fetch(mkUrl('/channelIcon', params), {\n    method: 'GET'\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch channelIcon data');\n  }\n  const blob = await response.blob();\n  return blob;\n}\n\n// 個別用動画ファイル取得Ajax関数\nasync function fetchFtIndividualVideo(vid) {\n  var params = new Map([['vid', vid]]);\n  const response = await fetch(mkUrl('/individual/video', params), {\n    method: 'GET'\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch individual video');\n  }\n  const blob = await response.blob();\n  return blob;\n}\n// 個別用動画ファイル取得パスAjax関数\nasync function fetchFtIndividualVideoPath(vid) {\n  var params = new Map([['vid', vid]]);\n  const response = await fetch(mkUrl('/individual/video-path', params), {\n    method: 'GET'\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch individual video');\n  }\n  return response.json();\n}\n// 個別用動画ファイル取得URL\nfunction fetchFtIndividualVideoUrl(vid) {\n  var params = new Map([['vid', vid]]);\n  return mkUrl('/individual/video', params);\n}\n\n// 個別用動画情報取得Ajax関数\nasync function fetchFtIndividualVideoInfo(vid) {\n  var params = new Map([['vid', vid]]);\n  const response = await fetch(mkUrl('/individual/info', params), {\n    method: 'GET'\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch individual info');\n  }\n  const json = await response.json();\n  return json;\n}\n\n// 個別用動画コメント取得Ajax関数\nasync function fetchFtIndividualVideoComment(vid, offset) {\n  var params = new Map([['vid', vid], ['offset', offset.toString()]]);\n  const response = await fetch(mkUrl('/individual/comment', params), {\n    method: 'GET'\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch comment info');\n  }\n  const json = await response.json();\n  return json;\n}\n\n// 個別用動画コメント総数 取得Ajax関数\nasync function fetchFtIndividualVideoCommentSummary(vid) {\n  var params = new Map([['vid', vid]]);\n  const response = await fetch(mkUrl('/individual/comment/summary', params), {\n    method: 'GET'\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch comment summary');\n  }\n  const json = await response.json();\n  return json;\n}\n\n// ユーザーアイコン取得Ajax関数\nasync function fetchFtUserIcon(userId) {\n  var params = new Map([['userId', userId]]);\n  const response = await fetch(mkUrl('/userIcon', params), {\n    method: 'GET'\n  });\n  if (!response.ok) {\n    // throw new Error('Failed to fetch user icon');\n  }\n  const blob = await response.blob();\n  return blob;\n}\n\n// レコメンドビデオ情報取得Ajax関数\nasync function fetchRecommendVideos(vid, offset) {\n  var params = new Map([['vid', vid], ['offset', offset.toString()]]);\n  const response = await fetch(mkUrl('/individual/recommend', params), {\n    method: 'GET'\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch recommend videos');\n  }\n  const json = await response.json();\n  return json;\n}\n\n// サジェスト情報取得Ajax関数\nasync function fetchSuggestSearch(text) {\n  var params = new Map([['text', text]]);\n  const response = await fetch(mkUrl('/suggest', params), {\n    method: 'GET'\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch suggest');\n  }\n  const json = await response.json();\n  return json;\n}\nexport default {\n  fetchFtThumbnailVideos,\n  fetchFtThumbnailImg,\n  fetchFtIndividualVideo,\n  fetchFtIndividualVideoPath,\n  fetchFtIndividualVideoUrl,\n  fetchFtIndividualVideoInfo,\n  fetchFtChannelIcon,\n  fetchFtIndividualVideoComment,\n  fetchFtIndividualVideoCommentSummary,\n  fetchFtUserIcon,\n  fetchRecommendVideos,\n  fetchSuggestSearch\n};","map":{"version":3,"names":["URL","mkUrl","dtlUrl","params","parameter","forEach","value","key","endsWith","slice","fetchFtThumbnailVideos","limit","offset","searchText","Map","toString","response","fetch","method","ok","Error","data","json","fetchFtThumbnailImg","vId","isHover","blob","fetchFtChannelIcon","channelId","fetchFtIndividualVideo","vid","fetchFtIndividualVideoPath","fetchFtIndividualVideoUrl","fetchFtIndividualVideoInfo","fetchFtIndividualVideoComment","fetchFtIndividualVideoCommentSummary","fetchFtUserIcon","userId","fetchRecommendVideos","fetchSuggestSearch","text"],"sources":["C:/Users/user/git/FakeTube/src/utils/ApiFetch.tsx"],"sourcesContent":["import {\r\n  FtThumbnailVideo,\r\n  FtIndividualVideoInfo,\r\n  VideoUrl,\r\n  Comment,\r\n  RecommendVideo,\r\n  Suggest,\r\n} from \"./DataType\"\r\n\r\n// サーバーサイドURL\r\nconst URL = 'http://localhost:8080/api/stream'\r\n\r\n// URL作成関数\r\nfunction mkUrl(dtlUrl: string, params: Map<string, string>) {\r\n  var parameter = '?';\r\n  params.forEach((value, key) => {\r\n    parameter += (key + '=' + value + '&');\r\n  });\r\n  if (parameter == '?') {\r\n    parameter = ''\r\n  } else if (parameter.endsWith('&')) {\r\n    parameter = parameter.slice(0, -1);\r\n  }\r\n  return URL + dtlUrl + parameter\r\n}\r\n\r\n// ホーム用動画取得Ajax関数\r\nasync function fetchFtThumbnailVideos(limit: number, offset: number, searchText: string): Promise<FtThumbnailVideo[]> {\r\n  var params = new Map<string, string>([\r\n    ['limit', limit.toString()], ['offset', offset.toString()], ['searchText', searchText]\r\n  ]);\r\n  const response = \r\n    await fetch(mkUrl('', params), {\r\n      method: 'GET',\r\n    });\r\n  if (!response.ok) {\r\n    throw new Error('Failed to fetch data');\r\n  }\r\n  const data = await response.json();\r\n  return data;\r\n}\r\n\r\n// ホーム用サムネイルImg取得Ajax関数\r\nasync function fetchFtThumbnailImg(vId: string, isHover: string): Promise<Blob> {\r\n  var params = new Map<string, string>([\r\n    ['vid', vId ], ['isHover', isHover ]\r\n  ]);\r\n  const response = \r\n    await fetch(mkUrl('/thumbnail', params), {\r\n      method: 'GET',\r\n    });\r\n  if (!response.ok) {\r\n    throw new Error('Failed to fetch data');\r\n  }\r\n  const blob = await response.blob();\r\n  return blob;\r\n}\r\n\r\n// 登録チャンネルアイコン画像取得Ajax関数\r\nasync function fetchFtChannelIcon(channelId: string): Promise<Blob> {\r\n  var params = new Map<string, string>([\r\n    ['channelId', channelId ]\r\n  ]);\r\n  const response = \r\n    await fetch(mkUrl('/channelIcon', params), {\r\n      method: 'GET',\r\n    });\r\n  if (!response.ok) {\r\n    throw new Error('Failed to fetch channelIcon data');\r\n  }\r\n  const blob = await response.blob();\r\n  return blob;\r\n}\r\n\r\n// 個別用動画ファイル取得Ajax関数\r\nasync function fetchFtIndividualVideo(vid: string): Promise<Blob> {\r\n  var params = new Map<string, string>([\r\n    ['vid', vid]\r\n  ]);\r\n  const response = \r\n    await fetch(mkUrl('/individual/video', params), {\r\n      method: 'GET',\r\n    });\r\n  if (!response.ok) {\r\n    throw new Error('Failed to fetch individual video');\r\n  }\r\n  const blob = await response.blob();\r\n  return blob;\r\n}\r\n// 個別用動画ファイル取得パスAjax関数\r\nasync function fetchFtIndividualVideoPath(vid: string): Promise<VideoUrl> {\r\n  var params = new Map<string, string>([\r\n    ['vid', vid]\r\n  ]);\r\n  const response = \r\n    await fetch(mkUrl('/individual/video-path', params), {\r\n      method: 'GET',\r\n    });\r\n  if (!response.ok) {\r\n    throw new Error('Failed to fetch individual video');\r\n  }\r\n  return response.json();\r\n}\r\n// 個別用動画ファイル取得URL\r\nfunction fetchFtIndividualVideoUrl(vid: string): string {\r\n  var params = new Map<string, string>([\r\n    ['vid', vid]\r\n  ]);\r\n  return mkUrl('/individual/video', params);\r\n}\r\n\r\n// 個別用動画情報取得Ajax関数\r\nasync function fetchFtIndividualVideoInfo(vid: string): Promise<FtIndividualVideoInfo> {\r\n  var params = new Map<string, string>([\r\n    ['vid', vid]\r\n  ]);\r\n  const response = \r\n    await fetch(mkUrl('/individual/info', params), {\r\n      method: 'GET',\r\n    });\r\n  if (!response.ok) {\r\n    throw new Error('Failed to fetch individual info');\r\n  }\r\n  const json = await response.json();\r\n  return json;\r\n}\r\n\r\n// 個別用動画コメント取得Ajax関数\r\nasync function fetchFtIndividualVideoComment(vid: string, offset: number): Promise<Comment[]> {\r\n  var params = new Map<string, string>([\r\n    ['vid', vid], ['offset', offset.toString()]\r\n  ]);\r\n  const response = \r\n    await fetch(mkUrl('/individual/comment', params), {\r\n      method: 'GET',\r\n    });\r\n  if (!response.ok) {\r\n    throw new Error('Failed to fetch comment info');\r\n  }\r\n  const json = await response.json();\r\n  return json;\r\n}\r\n\r\n// 個別用動画コメント総数 取得Ajax関数\r\nasync function fetchFtIndividualVideoCommentSummary(vid: string): Promise<number> {\r\n  var params = new Map<string, string>([['vid', vid]]);\r\n  const response = \r\n    await fetch(mkUrl('/individual/comment/summary', params), {\r\n      method: 'GET',\r\n    });\r\n  if (!response.ok) {\r\n    throw new Error('Failed to fetch comment summary');\r\n  }\r\n  const json = await response.json();\r\n  return json;\r\n}\r\n\r\n// ユーザーアイコン取得Ajax関数\r\nasync function fetchFtUserIcon(userId: string): Promise<Blob> {\r\n  var params = new Map<string, string>([\r\n    ['userId', userId]\r\n  ]);\r\n  const response = \r\n    await fetch(mkUrl('/userIcon', params), {\r\n      method: 'GET',\r\n    });\r\n  if (!response.ok) {\r\n    // throw new Error('Failed to fetch user icon');\r\n  }\r\n  const blob = await response.blob();\r\n  return blob;\r\n}\r\n\r\n// レコメンドビデオ情報取得Ajax関数\r\nasync function fetchRecommendVideos(vid: string, offset: number): Promise<RecommendVideo[]> {\r\n  var params = new Map<string, string>([\r\n    ['vid', vid], ['offset', offset.toString()]\r\n  ]);\r\n  const response = \r\n    await fetch(mkUrl('/individual/recommend', params), {\r\n      method: 'GET',\r\n    });\r\n  if (!response.ok) {\r\n    throw new Error('Failed to fetch recommend videos');\r\n  }\r\n  const json = await response.json();\r\n  return json;\r\n}\r\n\r\n// サジェスト情報取得Ajax関数\r\nasync function fetchSuggestSearch(text: string): Promise<Suggest[]> {\r\n  var params = new Map<string, string>([\r\n    ['text', text]\r\n  ]);\r\n  const response = \r\n    await fetch(mkUrl('/suggest', params), {\r\n      method: 'GET',\r\n    });\r\n  if (!response.ok) {\r\n    throw new Error('Failed to fetch suggest');\r\n  }\r\n  const json = await response.json();\r\n  return json;\r\n}\r\n\r\nexport default { \r\n  fetchFtThumbnailVideos,\r\n  fetchFtThumbnailImg,\r\n  fetchFtIndividualVideo,\r\n  fetchFtIndividualVideoPath,\r\n  fetchFtIndividualVideoUrl,\r\n  fetchFtIndividualVideoInfo,\r\n  fetchFtChannelIcon,\r\n  fetchFtIndividualVideoComment,\r\n  fetchFtIndividualVideoCommentSummary,\r\n  fetchFtUserIcon,\r\n  fetchRecommendVideos,\r\n  fetchSuggestSearch,\r\n}\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}